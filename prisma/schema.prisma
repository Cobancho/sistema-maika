// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  user
  admin
  generalValidator
  validator
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, sessionToken])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole @default(user)
  sucursal      String?
  accounts      Account[]
  sessions      Session[]
  uploadedMetadata  TransactionsMetadata[] @relation("UploadedByUser")
  confirmedMetadata TransactionsMetadata[] @relation("ConfirmedByUser")

  @@index([email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Operations {
  id           Int       @id @default(autoincrement())
  date         DateTime
  observations String?
  status       Boolean @default(false)
  transactions Transactions[]

  @@index([date])
}

model Transactions {
  id               Int         @id @default(autoincrement())
  operation        Operations  @relation(fields: [operationId], references: [id], onDelete: Cascade)
  operationId      Int
  type             String
  date             DateTime?
  operatorEntity   Entities    @relation("operatorEntity", fields: [operatorEntityId], references: [id], onDelete: Cascade)
  operatorEntityId Int
  fromEntity       Entities    @relation("fromEntity", fields: [fromEntityId], references: [id], onDelete: Cascade)
  fromEntityId     Int
  toEntity         Entities    @relation("toEntity", fields: [toEntityId], references: [id], onDelete: Cascade)
  toEntityId       Int
  currency         String
  amount           Float
  method           String?
  observations     String?
  status           Boolean @default(false)
  movements        Movements[]
  transactionMetadata TransactionsMetadata?

  @@index([operationId, fromEntityId, toEntityId, date, currency])
}

model Entities {
  id         Int          @id @default(autoincrement())
  name       String
  tag        String
  transactionsFrom  Transactions[] @relation("fromEntity")
  transactionsTo    Transactions[] @relation("toEntity")
  transactionsOperator Transactions[] @relation("operatorEntity")
  linksSharedEntity Links[] @relation("sharedEntity")

  @@index([name])
  @@index([tag])
}

model Movements {
  id           Int         @id @default(autoincrement())
  transaction  Transactions @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId Int
  direction    Int
  type         String
  status       Boolean @default(false)

  @@index([transactionId, direction])
}

model TransactionsMetadata {
  transaction     Transactions? @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId   Int @unique
  uploadedBy      String @default("clohgooer0000z1k5neo2hwcb")
  uploadedDate    DateTime @default(now())
  confirmedBy     String?
  confirmedDate   DateTime?
  uploadedByUser  User      @relation("UploadedByUser", fields: [uploadedBy], references: [id])
  confirmedByUser User?      @relation("ConfirmedByUser", fields: [confirmedBy], references: [id])
  history         Json?

  @@index([transactionId, uploadedBy, confirmedBy])
}

model Links {
  id Int @id @default(autoincrement())
  sharedEntity Entities @relation("sharedEntity", fields: [sharedEntityId], references: [id], onDelete: Cascade)
  sharedEntityId Int
  password String
  expiration DateTime?
}