// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  expires_in         Int?
  ext_expires_in     Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, sessionToken])
}

model User {
  id            String    @id @default(cuid())
  name          String? @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  permissions   Json?
  role          Role? @relation(fields: [roleId], references: [id])
  roleId        Int?
  accounts      Account[]
  sessions      Session[]
  uploadedMetadata  TransactionsMetadata[] @relation("UploadedByUser")
  uploadedRequests  Requests[] @relation("UploadedByUserRequest")
  confirmedMetadata TransactionsMetadata[] @relation("ConfirmedByUser")
  cancelledMetadata TransactionsMetadata[] @relation("CancelledByUser")

  entity  Entities? @relation(fields: [entityId], references: [id])
  entityId Int? @unique 

  @@index([email, name])
}

model Role {
  id    Int @id @default(autoincrement())
  name String @unique
  permissions Json
  color String?
  users User[]

  @@index([name])
}

model Tag {
  name String @id
  parent String?
  color String?
  entities Entities[]

  parentTag Tag? @relation("ChildTags", fields: [parent], references: [name])
  childTags Tag[] @relation("ChildTags")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Operations {
  id           Int       @id @default(autoincrement())
  date         DateTime
  observations String?
  transactions Transactions[]

  @@index([date])
}

enum Status {
  pending
  confirmed
  cancelled
}

model Transactions {
  id               Int         @id @default(autoincrement())
  operation        Operations  @relation(fields: [operationId], references: [id], onDelete: Cascade)
  operationId      Int
  type             String
  date             DateTime?
  operatorEntity   Entities    @relation("operatorEntity", fields: [operatorEntityId], references: [id], onDelete: Cascade)
  operatorEntityId Int
  fromEntity       Entities    @relation("fromEntity", fields: [fromEntityId], references: [id], onDelete: Cascade)
  fromEntityId     Int
  toEntity         Entities    @relation("toEntity", fields: [toEntityId], references: [id], onDelete: Cascade)
  toEntityId       Int
  currency         String
  amount           Float
  method           String?
  observations     String?
  status           Status @default(pending)
  movements        Movements[]
  transactionMetadata TransactionsMetadata?

  @@index([operationId, fromEntityId, toEntityId, date, currency])
}

model Entities {
  id         Int          @id @default(autoincrement())
  name       String @unique
  tag        Tag     @relation(fields: [tagName], references: [name])
  tagName        String
  transactionsFrom  Transactions[] @relation("fromEntity")
  transactionsTo    Transactions[] @relation("toEntity")
  balancesSelected  Balances[] @relation("selectedEntityBalance")
  balancesOther    Balances[] @relation("otherEntityBalance")
  transactionsOperator Transactions[] @relation("operatorEntity")
  linksSharedEntity Links[] @relation("sharedEntity")

  user  User? 

  @@index([name])
  @@index([tagName])
}

model Movements {
  id           Int         @id @default(autoincrement())
  transaction  Transactions @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId Int
  direction    Int
  type         String
  account      Boolean @default(false)
  balance      Float
  balanceId    Int 
  balanceObject Balances @relation(fields: [balanceId], references: [id], onDelete: Cascade)

  @@index([transactionId, direction])
}

model Balances {
  id                   Int @id @default(autoincrement())
  selectedEntity       Entities    @relation("selectedEntityBalance", fields: [selectedEntityId], references: [id], onDelete: Cascade)
  selectedEntityId     Int
  otherEntity          Entities    @relation("otherEntityBalance", fields: [otherEntityId], references: [id], onDelete: Cascade)
  otherEntityId        Int 
  currency             String
  account              Boolean
  date                 DateTime
  balance              Float
  movements            Movements[]

  @@index([selectedEntityId, otherEntityId, date, account, currency])
}

model TransactionsMetadata {
  transaction     Transactions? @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId   Int @unique
  uploadedBy      String
  uploadedDate    DateTime @default(now())
  confirmedBy     String?
  confirmedDate   DateTime?
  cancelledBy String?
  cancelledDate DateTime?
  uploadedByUser  User      @relation("UploadedByUser", fields: [uploadedBy], references: [id])
  confirmedByUser User?      @relation("ConfirmedByUser", fields: [confirmedBy], references: [id])
  cancelledByUser User?     @relation("CancelledByUser", fields: [cancelledBy], references: [id])
  history         Json?
  metadata      Json?

  @@index([transactionId, uploadedBy, confirmedBy])
}

model Links {
  id Int @id @default(autoincrement())
  sharedEntity Entities @relation("sharedEntity", fields: [sharedEntityId], references: [id], onDelete: Cascade)
  sharedEntityId Int
  password String
  expiration DateTime?
}

model Requests {
  id Int @id @default(autoincrement())
  uploadedBy String
  uploadedByUser  User      @relation("UploadedByUserRequest", fields: [uploadedBy], references: [id])
  title String
  content String
  status RequestStatus @default(pending)
  developerMessage String?
}

enum RequestStatus {
  pending
  working
  finished
}